Write a Python program that shows 20 balls bouncing inside a spinning heptagon: - All balls have the same radius. - All balls have a number on it from 1 to 20. - All balls drop from the heptagon center when starting. - Colors are: #f8b862, #f6ad49, #f39800, #f08300, #ec6d51, #ee7948, #ed6d3d, #ec6800, #ec6800, #ee7800, #eb6238, #ea5506, #ea5506, #eb6101, #e49e61, #e45e32, #e17b34, #dd7a56, #db8449, #d66a35 - The balls should be affected by gravity and friction, and they must bounce off the rotating walls realistically. There should also be collisions between balls. - The material of all the balls determines that their impact bounce height will not exceed the radius of the heptagon, but higher than ball radius. - All balls rotate with friction, the numbers on the ball can be used to indicate the spin of the ball. - The heptagon is spinning around its center, and the speed of spinning is 360 degrees per 5 seconds. - The heptagon size should be large enough to contain all the balls. - Do not use the pygame library; implement collision detection algorithms and collision response etc. by yourself. The following Python libraries are allowed: tkinter, math, numpy, dataclasses, typing, sys. - All codes should be put in a single Python file. Before starting the implementation, I will outline the key components and steps required to create the simulation:

1. **Environment Setup**: Define the heptagon, its rotation, and the physics parameters like gravity, friction, and ball properties.
2. **Ball Properties**: Implement the ball class with attributes for position, velocity, radius, color, and rotation.
3. **Physics Implementation**: Implement gravity, friction, and collision response for both ball-wall and ball-ball collisions.
4. **Rotation Handling**: Handle the rotation of the heptagon and adjust the ball positions and velocities accordingly.
5. **Visualization**: Use tkinter for rendering the simulation.

Let's proceed with the implementation:

```python
import tkinter as tk
import math
import numpy as np
from dataclasses import dataclass
from typing import List, Tuple

# Constants
WINDOW_WIDTH = 800
WINDOW_HEIGHT = 800
GRAVITY = 9.8 * 60  # Adjusted for the simulation scale
FRICTION = 0.02
RESTITUTION = 0.8  # Coefficient of restitution for bounces
ANGULAR_VELOCITY = 2 * math.pi / 5  # 360 degrees per 5 seconds
BALL_RADIUS = 15
HEPTAGON_RADIUS = 300
BALL_COLORS = [
    "#f8b862", "#f6ad49", "#f39800", "#f08300", "#ec6d51", "#ee7948", "#ed6d3d", "#ec6800", "#ec6800", "#ee7800",
    "#eb6238", "#ea5506", "#ea5506", "#eb6101", "#e49e61", "#e45e32", "#e17b34", "#dd7a56", "#db8449", "#d66a35"
]

@dataclass
class Ball:
    x: float
    y: float
    vx: float
    vy: float
    radius: float
    color: str
    number: int
    angle: float = 0.0  # Rotation angle

@dataclass
class Heptagon:
    center_x: float
    center_y: float
    radius: float
    angle: float = 0.0  # Rotation angle

    def get_vertices(self) -> List[Tuple[float, float]]:
        vertices = []
        for i in range(7):
            theta = self.angle + i * 2 * math.pi / 7
            x = self.center_x + self.radius * math.cos(theta)
            y = self.center_y + self.radius * math.sin(theta)
            vertices.append((x, y))
        return vertices

    def get_edges(self) -> List[Tuple[Tuple[float, float], Tuple[float, float]]]:
        vertices = self.get_vertices()
        edges = []
        for i in range(7):
            edges.append((vertices[i], vertices[(i + 1) % 7]))
        return edges

def distance(p1: Tuple[float, float], p2: Tuple[float, float]) -> float:
    return math.sqrt((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2)

def normalize(v: Tuple[float, float]) -> Tuple[float, float]:
    mag = math.sqrt(v[0] ** 2 + v[1] ** 2)
    return (v[0] / mag, v[1] / mag)

def dot_product(v1: Tuple[float, float], v2: Tuple[float, float]) -> float:
    return v1[0] * v2[0] + v1[1] * v2[1]

def reflect(velocity: Tuple[float, float], normal: Tuple[float, float]) -> Tuple[float, float]:
    return (
        velocity[0] - 2 * dot_product(velocity, normal) * normal[0],
        velocity[1] - 2 * dot_product(velocity, normal) * normal[1]
    )

def check_ball_wall_collision(ball: Ball, heptagon: Heptagon) -> bool:
    edges = heptagon.get_edges()
    for edge in edges:
        p1, p2 = edge
        ball_to_p1 = (ball.x - p1[0], ball.y - p1[1])
        edge_vector = (p2[0] - p1[0], p2[1] - p1[1])
        edge_length = distance(p1, p2)
        edge_unit = normalize(edge_vector)
        proj_length = dot_product(ball_to_p1, edge_unit)
        closest_point = (
            p1[0] + edge_unit[0] * max(0, min(proj_length, edge_length)),
            p1[1] + edge_unit[1] * max(0, min(proj_length, edge_length))
        )
        dist = distance((ball.x, ball.y), closest_point)
        if dist <= ball.radius:
            normal = normalize((ball.x - closest_point[0], ball.y - closest_point[1]))
            ball.vx, ball.vy = reflect((ball.vx, ball.vy), normal)
            ball.vx *= RESTITUTION
            ball.vy *= RESTITUTION
            # Adjust position to prevent overlap
            penetration = ball.radius - dist
            ball.x += normal[0] * penetration
            ball.y += normal[1] * penetration
            return True
    return False

def check_ball_ball_collision(ball1: Ball, ball2: Ball) -> bool:
    dist = distance((ball1.x, ball1.y), (ball2.x, ball2.y))
    if dist <= ball1.radius + ball2.radius:
        normal = normalize((ball2.x - ball1.x, ball2.y - ball1.y))
        relative_velocity = (ball2.vx - ball1.vx, ball2.vy - ball1.vy)
        vel_along_normal = dot_product(relative_velocity, normal)
        if vel_along_normal > 0:
            return False
        impulse = -(1 + RESTITUTION) * vel_along_normal / 2
        ball1.vx -= impulse * normal[0]
        ball1.vy -= impulse * normal[1]
        ball2.vx += impulse * normal[0]
        ball2.vy += impulse * normal[1]
        # Adjust positions to prevent overlap
        penetration = (ball1.radius + ball2.radius - dist) / 2
        ball1.x -= normal[0] * penetration
        ball1.y -= normal[1] * penetration
        ball2.x += normal[0] * penetration
        ball2.y += normal[1] * penetration
        return True
    return False

def update_simulation(balls: List[Ball], heptagon: Heptagon, dt: float):
    # Update heptagon rotation
    heptagon.angle += ANGULAR_VELOCITY * dt

    # Update ball positions and velocities
    for ball in balls:
        # Apply gravity
        ball.vy += GRAVITY * dt
        # Update position
        ball.x += ball.vx * dt
        ball.y += ball.vy * dt
        # Apply friction to velocity
        ball.vx *= (1 - FRICTION)
        ball.vy *= (1 - FRICTION)
        # Update rotation based on velocity
        ball.angle += (ball.vx ** 2 + ball.vy ** 2) ** 0.5 * dt * 0.1

    # Check for ball-wall collisions
    for ball in balls:
        check_ball_wall_collision(ball, heptagon)

    # Check for ball-ball collisions
    for i in range(len(balls)):
        for j in range(i + 1, len(balls)):
            check_ball_ball_collision(balls[i], balls[j])

def draw_simulation(canvas: tk.Canvas, balls: List[Ball], heptagon: Heptagon):
    canvas.delete("all")
    # Draw heptagon
    vertices = heptagon.get_vertices()
    canvas.create_polygon(
        *[coord for vertex in vertices for coord in vertex],
        outline="black",
        fill="",
        width=2
    )
    # Draw balls
    for ball in balls:
        canvas.create_oval(
            ball.x - ball.radius, ball.y - ball.radius,
            ball.x + ball.radius, ball.y + ball.radius,
            fill=ball.color,
            outline="black"
        )
        # Draw number to indicate rotation
        text_x = ball.x + 0.5 * ball.radius * math.cos(ball.angle)
        text_y = ball.y + 0.5 * ball.radius * math.sin(ball.angle)
        canvas.create_text(
            text_x, text_y,
            text=str(ball.number),
            fill="black",
            font=("Arial", int(ball.radius * 0.8))
        )

def main():
    root = tk.Tk()
    root.title("Bouncing Balls in Spinning Heptagon")

    canvas = tk.Canvas(root, width=WINDOW_WIDTH, height=WINDOW_HEIGHT, bg="white")
    canvas.pack()

    # Initialize heptagon
    heptagon = Heptagon(center_x=WINDOW_WIDTH // 2, center_y=WINDOW_HEIGHT // 2, radius=HEPTAGON_RADIUS)

    # Initialize balls
    balls = []
    for i in range(20):
        angle = 2 * math.pi * i / 20
        x = WINDOW_WIDTH // 2 + math.cos(angle) * 5  # Start close to the center
        y = WINDOW_HEIGHT // 2 + math.sin(angle) * 5
        balls.append(Ball(x, y, 0, 0, BALL_RADIUS, BALL_COLORS[i], i + 1))

    dt = 1 / 60  # Time step

    def update():
        update_simulation(balls, heptagon, dt)
        draw_simulation(canvas, balls, heptagon)
        root.after(16, update)  # ~60 FPS

    update()
    root.mainloop()

if __name__ == "__main__":
    main()
```

### Explanation:

1. **Constants and Dataclasses**: We define constants for the window size, physics parameters, and ball colors. We also create `Ball` and `Heptagon` dataclasses to manage the properties of the balls and the heptagon.

2. **Helper Functions**: We implement helper functions to calculate distances, normalize vectors, compute dot products, and handle reflections for collisions.

3. **Collision Detection and Response**:
   - **Ball-Wall Collision**: We check if a ball intersects with any edge of the heptagon. If it does, we reflect the ball's velocity along the normal of the wall and adjust its position to prevent overlap.
   - **Ball-Ball Collision**: We check for collisions between all pairs of balls. If a collision is detected, we compute the impulse and adjust the velocities of both balls accordingly.

4. **Simulation Update**: The `update_simulation` function updates the positions and velocities of the balls, applies gravity and friction, and handles all collisions.

5. **Visualization**: The `draw_simulation` function renders the heptagon and the balls on the canvas. The numbers on the balls indicate their rotation.

6. **Main Function**: The `main` function sets up the tkinter window, initializes the heptagon and balls, and starts the simulation loop.

This implementation ensures that the balls bounce realistically off the rotating walls and each other, with proper physics for gravity, friction, and rotation. The numbers on the balls provide a visual indication of their spin. [end of text]
