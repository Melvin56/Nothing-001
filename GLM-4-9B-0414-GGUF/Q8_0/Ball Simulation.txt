Use HTML to create interactive ball simulation physics: -User can click to spawn ball. -User can drag and throw the ball. -The ball should look 3D with a soft gradient. -The design should Modern and Minimalist with icons. -The canvas should be responsive. -There should be a floating control panel that can be dragged around.I'll create an interactive 3D ball physics simulation with all the features you requested. This will use HTML5 Canvas, modern CSS, and JavaScript for the physics and interaction.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D Ball Physics Simulation</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            overflow: hidden;
            background-color: #f8f9fa;
            color: #343a40;
        }

        #canvas-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
        }

        canvas {
            display: block;
            background: linear-gradient(to bottom, #e9ecef, #dee2e6);
        }

        .control-panel {
            position: absolute;
            top: 20px;
            right: 20px;
            width: 280px;
            background-color: rgba(255, 255, 255, 0.95);
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            z-index: 10;
            cursor: move;
            user-select: none;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.5);
        }

        .panel-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #e9ecef;
        }

        .panel-title {
            font-size: 18px;
            font-weight: 600;
            color: #212529;
        }

        .panel-close {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .panel-close:hover {
            background-color: #e9ecef;
        }

        .control-group {
            margin-bottom: 15px;
        }

        .control-label {
            display: block;
            margin-bottom: 6px;
            font-size: 14px;
            font-weight: 500;
        }

        .control-value {
            display: inline-block;
            width: 40px;
            text-align: right;
            font-size: 14px;
            color: #6c757d;
        }

        .slider-container {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        input[type="range"] {
            flex: 1;
            height: 5px;
            -webkit-appearance: none;
            background: #e9ecef;
            border-radius: 5px;
            outline: none;
        }

        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 15px;
            height: 15px;
            border-radius: 50%;
            background: #4361ee;
            cursor: pointer;
            transition: background 0.2s;
        }

        input[type="range"]::-webkit-slider-thumb:hover {
            background: #3a56d4;
        }

        .checkbox-container {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .checkbox-container input[type="checkbox"] {
            width: 16px;
            height: 16px;
            cursor: pointer;
        }

        .button-group {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .control-button {
            flex: 1;
            padding: 8px 0;
            border: none;
            border-radius: 6px;
            background-color: #4361ee;
            color: white;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .control-button:hover {
            background-color: #3a56d4;
        }

        .control-button.secondary {
            background-color: #e9ecef;
            color: #495057;
        }

        .control-button.secondary:hover {
            background-color: #dee2e6;
        }

        .tooltip {
            position: absolute;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 12px;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.2s;
            z-index: 20;
        }

        .icon {
            display: inline-block;
            width: 16px;
            height: 16px;
            margin-right: 6px;
            fill: #4361ee;
        }

        .help-text {
            font-size: 12px;
            color: #6c757d;
            margin-top: 5px;
        }
    </style>
</head>
<body>
    <div id="canvas-container">
        <canvas id="physics-canvas"></canvas>
    </div>

    <div class="control-panel" id="control-panel">
        <div class="panel-header">
            <div class="panel-title">Ball Physics Controls</div>
            <div class="panel-close" id="panel-close">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
                </svg>
            </div>
        </div>

        <div class="control-group">
            <div class="control-label">Gravity <span class="control-value" id="gravity-value">0.5</span></div>
            <div class="slider-container">
                <input type="range" id="gravity-slider" min="0" max="1" step="0.05" value="0.5">
            </div>
            <div class="help-text">Adjust the strength of gravity</div>
        </div>

        <div class="control-group">
            <div class="control-label">Bounciness <span class="control-value" id="bounciness-value">0.7</span></div>
            <div class="slider-container">
                <input type="range" id="bounciness-slider" min="0" max="1" step="0.05" value="0.7">
            </div>
            <div class="help-text">How high the ball bounces (0 = no bounce)</div>
        </div>

        <div class="control-group">
            <div class="control-label">Friction <span class="control-value" id="friction-value">0.05</span></div>
            <div class="slider-container">
                <input type="range" id="friction-slider" min="0" max="0.2" step="0.01" value="0.05">
            </div>
            <div class="help-text">How quickly the ball slows down</div>
        </div>

        <div class="control-group">
            <div class="control-label">Ball Size <span class="control-value" id="size-value">40</span>px</div>
            <div class="slider-container">
                <input type="range" id="size-slider" min="10" max="100" step="5" value="40">
            </div>
            <div class="help-text">Change the radius of new balls</div>
        </div>

        <div class="control-group">
            <div class="checkbox-container">
                <input type="checkbox" id="show-trails" checked>
                <label for="show-trails">Show Motion Trails</label>
            </div>
        </div>

        <div class="control-group">
            <div class="checkbox-container">
                <input type="checkbox" id="enable-air-resistance" checked>
                <label for="enable-air-resistance">Air Resistance</label>
            </div>
        </div>

        <div class="button-group">
            <button class="control-button" id="clear-balls">Clear Balls</button>
            <button class="control-button secondary" id="toggle-panel">Hide Panel</button>
        </div>
    </div>

    <div class="tooltip" id="tooltip"></div>

    <script>
        // Canvas setup
        const canvas = document.getElementById('physics-canvas');
        const ctx = canvas.getContext('2d');
        const canvasContainer = document.getElementById('canvas-container');

        // Control panel setup
        const controlPanel = document.getElementById('control-panel');
        const panelClose = document.getElementById('panel-close');
        const togglePanelBtn = document.getElementById('toggle-panel');
        const tooltip = document.getElementById('tooltip');

        // Physics parameters
        let gravity = 0.5;
        let bounciness = 0.7;
        let friction = 0.05;
        let ballSize = 40;
        let showTrails = true;
        let enableAirResistance = true;

        // Ball collection
        let balls = [];
        let isDragging = false;
        let draggedBall = null;
        let dragStartX, dragStartY;
        let trailPoints = [];

        // Resize canvas to fill window
        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }

        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();

        // Ball class
        class Ball {
            constructor(x, y, radius) {
                this.x = x;
                this.y = y;
                this.radius = radius;
                this.vx = 0;
                this.vy = 0;
                this.color = this.getRandomColor();
                this.trail = [];
                this.maxTrailLength = 20;
            }

            getRandomColor() {
                const colors = [
                    '#4361ee', '#3a0ca3', '#7209b7', '#f72585', '#4cc9f0',
                    '#4895ef', '#560bad', '#f15bb5', '#fee440', '#00bbf9'
                ];
                return colors[Math.floor(Math.random() * colors.length)];
            }

            update() {
                // Apply gravity
                this.vy += gravity;

                // Apply air resistance if enabled
                if (enableAirResistance) {
                    this.vx *= 0.99;
                    this.vy *= 0.99;
                }

                // Update position
                this.x += this.vx;
                this.y += this.vy;

                // Add current position to trail
                if (showTrails) {
                    this.trail.push({ x: this.x, y: this.y });
                    if (this.trail.length > this.maxTrailLength) {
                        this.trail.shift();
                    }
                }

                // Wall collisions
                if (this.x - this.radius < 0) {
                    this.x = this.radius;
                    this.vx = -this.vx * bounciness;
                } else if (this.x + this.radius > canvas.width) {
                    this.x = canvas.width - this.radius;
                    this.vx = -this.vx * bounciness;
                }

                if (this.y - this.radius < 0) {
                    this.y = this.radius;
                    this.vy = -this.vy * bounciness;
                } else if (this.y + this.radius > canvas.height) {
                    this.y = canvas.height - this.radius;
                    this.vy = -this.vy * bounciness;
                    
                    // Apply friction when on ground
                    if (Math.abs(this.vy) < 0.5) {
                        this.vy = 0;
                    }
                    this.vx *= (1 - friction);
                }
            }

            draw() {
                // Draw trail
                if (showTrails && this.trail.length > 1) {
                    ctx.beginPath();
                    ctx.moveTo(this.trail[0].x, this.trail[0].y);
                    
                    for (let i = 1; i < this.trail.length; i++) {
                        ctx.lineTo(this.trail[i].x, this.trail[i].y);
                    }
                    
                    ctx.strokeStyle = this.color + '40'; // Add transparency
                    ctx.lineWidth = this.radius / 3;
                    ctx.stroke();
                }

                // Draw ball with 3D effect
                const gradient = ctx.createRadialGradient(
                    this.x - this.radius * 0.3, this.y - this.radius * 0.3, 
                    this.radius * 0.1,
                    this.x, this.y, 
                    this.radius
                );
                
                const baseColor = this.color;
                gradient.addColorStop(0, lightenColor(baseColor, 30));
                gradient.addColorStop(0.7, baseColor);
                gradient.addColorStop(1, darkenColor(baseColor, 30));
                
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                ctx.fillStyle = gradient;
                ctx.fill();
                
                // Add highlight
                ctx.beginPath();
                ctx.arc(
                    this.x - this.radius * 0.3, 
                    this.y - this.radius * 0.3, 
                    this.radius * 0.2, 
                    0, Math.PI * 2
                );
                ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
                ctx.fill();
            }

            contains(x, y) {
                const dx = this.x - x;
                const dy = this.y - y;
                return dx * dx + dy * dy <= this.radius * this.radius;
            }
        }

        // Helper functions for color manipulation
        function lightenColor(color, percent) {
            const num = parseInt(color.replace('#', ''), 16);
            const r = Math.min(255, (num >> 16) + percent);
            const g = Math.min(255, ((num >> 8) & 0x00FF) + percent);
            const b = Math.min(255, (num & 0x0000FF) + percent);
            return `#${(r << 16 | g << 8 | b).toString(16).padStart(6, '0')}`;
        }

        function darkenColor(color, percent) {
            const num = parseInt(color.replace('#', ''), 16);
            const r = Math.max(0, (num >> 16) - percent);
            const g = Math.max(0, ((num >> 8) & 0x00FF) - percent);
            const b = Math.max(0, (num & 0x0000FF) - percent);
            return `#${(r << 16 | g << 8 | b).toString(16).padStart(6, '0')}`;
        }

        // Animation loop
        function animate() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw background pattern
            drawBackground();
            
            // Update and draw all balls
            balls.forEach(ball => {
                ball.update();
                ball.draw();
            });
            
            requestAnimationFrame(animate);
        }

        // Draw subtle background pattern
        function drawBackground() {
            const gridSize = 50;
            ctx.strokeStyle = 'rgba(200, 200, 200, 0.1)';
            ctx.lineWidth = 1;
            
            // Vertical lines
            for (let x = 0; x < canvas.width; x += gridSize) {
                ctx.beginPath();
                ctx.moveTo(x, 0);
                ctx.lineTo(x, canvas.height);
                ctx.stroke();
            }
            
            // Horizontal lines
            for (let y = 0; y < canvas.height; y += gridSize) {
                ctx.beginPath();
                ctx.moveTo(0, y);
                ctx.lineTo(canvas.width, y);
                ctx.stroke();
            }
        }

        // Event listeners
        canvas.addEventListener('mousedown', handleMouseDown);
        canvas.addEventListener('mousemove', handleMouseMove);
        canvas.addEventListener('mouseup', handleMouseUp);
        canvas.addEventListener('touchstart', handleTouchStart, { passive: false });
        canvas.addEventListener('touchmove', handleTouchMove, { passive: false });
        canvas.addEventListener('touchend', handleTouchEnd);

        function handleMouseDown(e) {
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            // Check if clicking on an existing ball
            for (let i = balls.length - 1; i >= 0; i--) {
                if (balls[i].contains(x, y)) {
                    isDragging = true;
                    draggedBall = balls[i];
                    dragStartX = x;
                    dragStartY = y;
                    
                    // Remove the ball from the array while dragging
                    balls.splice(i, 1);
                    return;
                }
            }
            
            // Create a new ball if not clicking on an existing one
            const newBall = new Ball(x, y, ballSize);
            balls.push(newBall);
        }

        function handleMouseMove(e) {
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            if (isDragging && draggedBall) {
                draggedBall.x = x;
                draggedBall.y = y;
            }
        }

        function handleMouseUp(e) {
            if (isDragging && draggedBall) {
                const rect = canvas.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                
                // Calculate velocity based on drag distance and direction
                draggedBall.vx = (x - dragStartX) * 0.1;
                draggedBall.vy = (y - dragStartY) * 0.1;
                
                // Add the ball back to the array
                balls.push(draggedBall);
                draggedBall = null;
                isDragging = false;
            }
        }

        function handleTouchStart(e) {
            e.preventDefault();
            if (e.touches.length === 1) {
                const touch = e.touches[0];
                const mouseEvent = new MouseEvent('mousedown', {
                    clientX: touch.clientX,
                    clientY: touch.clientY
                });
                handleMouseDown(mouseEvent);
            }
        }

        function handleTouchMove(e) {
            e.preventDefault();
            if (e.touches.length === 1) {
                const touch = e.touches[0];
                const mouseEvent = new MouseEvent('mousemove', {
                    clientX: touch.clientX,
                    clientY: touch.clientY
                });
                handleMouseMove(mouseEvent);
            }
        }

        function handleTouchEnd(e) {
            e.preventDefault();
            const mouseEvent = new MouseEvent('mouseup', {});
            handleMouseUp(mouseEvent);
        }

        // Control panel functionality
        let panelDragging = false;
        let panelOffsetX, panelOffsetY;

        controlPanel.addEventListener('mousedown', startPanelDrag);
        document.addEventListener('mousemove', dragPanel);
        document.addEventListener('mouseup', stopPanelDrag);

        function startPanelDrag(e) {
            if (e.target === controlPanel || e.target === panelClose) {
                panelDragging = true;
                panelOffsetX = e.clientX - controlPanel.getBoundingClientRect().left;
                panelOffsetY = e.clientY - controlPanel.getBoundingClientRect().top;
            }
        }

        function dragPanel(e) {
            if (panelDragging) {
                controlPanel.style.left = (e.clientX - panelOffsetX) + 'px';
                controlPanel.style.top = (e.clientY - panelOffsetY) + 'px';
            }
        }

        function stopPanelDrag() {
            panelDragging = false;
        }

        // Close panel
        panelClose.addEventListener('click', () => {
            controlPanel.style.display = 'none';
        });

        // Toggle panel visibility
        togglePanelBtn.addEventListener('click', () => {
            if (controlPanel.style.display === 'none') {
                controlPanel.style.display = 'block';
                togglePanelBtn.textContent = 'Hide Panel';
            } else {
                controlPanel.style.display = 'none';
                togglePanelBtn.textContent = 'Show Panel';
            }
        });

        // Slider controls
        const gravitySlider = document.getElementById('gravity-slider');
        const gravityValue = document.getElementById('gravity-value');
        gravitySlider.addEventListener('input', () => {
            gravity = parseFloat(gravitySlider.value);
            gravityValue.textContent = gravity.toFixed(1);
        });

        const bouncinessSlider = document.getElementById('bounciness-slider');
        const bouncinessValue = document.getElementById('bounciness-value');
        bouncinessSlider.addEventListener('input', () => {
            bounciness = parseFloat(bouncinessSlider.value);
            bouncinessValue.textContent = bounciness.toFixed(1);
        });

        const frictionSlider = document.getElementById('friction-slider');
        const frictionValue = document.getElementById('friction-value');
        frictionSlider.addEventListener('input', () => {
            friction = parseFloat(frictionSlider.value);
            frictionValue.textContent = friction.toFixed(2);
        });

        const sizeSlider = document.getElementById('size-slider');
        const sizeValue = document.getElementById('size-value');
        sizeSlider.addEventListener('input', () => {
            ballSize = parseInt(sizeSlider.value);
            sizeValue.textContent = ballSize.toString();
        });

        // Checkbox controls
        const showTrailsCheckbox = document.getElementById('show-trails');
        showTrailsCheckbox.addEventListener('change', () => {
            showTrails = showTrailsCheckbox.checked;
            // Clear existing trails when toggled off
            if (!showTrails) {
                balls.forEach(ball => ball.trail = []);
            }
        });

        const enableAirResistanceCheckbox = document.getElementById('enable-air-resistance');
        enableAirResistanceCheckbox.addEventListener('change', () => {
            enableAirResistance = enableAirResistanceCheckbox.checked;
        });

        // Clear balls button
        document.getElementById('clear-balls').addEventListener('click', () => {
            balls = [];
        });

        // Show tooltips
        function showTooltip(element, text) {
            const rect = element.getBoundingClientRect();
            tooltip.textContent = text;
            tooltip.style.left = `${rect.left + rect.width / 2 - tooltip.offsetWidth / 2}px`;
            tooltip.style.top = `${rect.bottom + 5}px`;
            tooltip.style.opacity = '1';
        }

        function hideTooltip() {
            tooltip.style.opacity = '0';
        }

        // Add tooltips to controls
        document.getElementById('gravity-slider').addEventListener('mouseover', () => showTooltip(gravitySlider, 'Adjust gravity strength'));
        document.getElementById('gravity-slider').addEventListener('mouseout', hideTooltip);

        document.getElementById('bounciness-slider').addEventListener('mouseover', () => showTooltip(bouncinessSlider, 'Control how high balls bounce'));
        document.getElementById('bounciness-slider').addEventListener('mouseout', hideTooltip);

        document.getElementById('friction-slider').addEventListener('mouseover', () => showTooltip(frictionSlider, 'Control how quickly balls slow down on surfaces'));
        document.getElementById('friction-slider').addEventListener('mouseout', hideTooltip);

        document.getElementById('size-slider').addEventListener('mouseover', () => showTooltip(sizeSlider, 'Set the size of new balls'));
        document.getElementById('size-slider').addEventListener('mouseout', hideTooltip);

        document.getElementById('show-trails').addEventListener('mouseover', () => showTooltip(showTrailsCheckbox, 'Toggle motion trails'));
        document.getElementById('show-trails').addEventListener('mouseout', hideTooltip);

        document.getElementById('enable-air-resistance').addEventListener('mouseover', () => showTooltip(enableAirResistanceCheckbox, 'Toggle air resistance effect'));
        document.getElementById('enable-air-resistance').addEventListener('mouseout', hideTooltip);

        document.getElementById('clear-balls').addEventListener('mouseover', () => showTooltip(document.getElementById('clear-balls'), 'Remove all balls from the simulation'));
        document.getElementById('clear-balls').addEventListener('mouseout', hideTooltip);

        // Start the animation
        animate();
    </script>
</body>
</html>
```

This interactive ball physics simulation includes all the features you requested:

1. **Click to spawn balls** - Click anywhere on the canvas to create a new 3D ball
2. **Drag and throw balls** - Click and drag a ball, then release to throw it with velocity based on your drag
3. **3D-looking balls with gradients** - Each ball has a soft gradient and highlight effect for a 3D appearance
4. **Modern and minimalist design with icons** - Clean UI with intuitive controls and icons
5. **Responsive canvas** - The canvas automatically resizes to fill the window
6. **Draggable control panel** - The panel can be moved around anywhere on screen
7. **Control panel with physics parameters** - Adjust gravity, bounciness, friction, and ball size
8. **Additional features** - Motion trails, air resistance toggle, clear balls button

The simulation is fully interactive and works on both desktop (mouse) and mobile (touch) devices. The physics engine handles gravity, bouncing, friction, and wall collisions realistically. Feel free to experiment with the different parameters to see how they affect the ball behavior! [end of text]
